{
  "googleLabsJules": {
    "overview": {
      "name": "Google Labs Jules",
      "type": "Agente de Codifica√ß√£o Aut√¥nomo e Ass√≠ncrono",
      "tagline": "Um estagi√°rio de IA extremamente capaz e r√°pido.",
      "description": "Jules √© uma ferramenta projetada para redefinir o papel da intelig√™ncia artificial no fluxo de trabalho de desenvolvimento de software. Em vez de atuar como um assistente em tempo real (copiloto), ele opera como um agente aut√¥nomo, assumindo tarefas completas, desde o planejamento inicial at√© a cria√ß√£o de um Pull Request (PR) final. Isso libera os desenvolvedores para se concentrarem em atividades de maior valor cognitivo, como design de arquitetura e inova√ß√£o de produtos. Lan√ßado inicialmente em dezembro de 2024 e em beta p√∫blico no Google I/O 2025, √© impulsionado pelo modelo Gemini 2.5 Pro.",
      "valueProposition": [
        "Aumenta a produtividade atrav√©s da automa√ß√£o de tarefas morosas, como limpeza de d√≠vida t√©cnica, testes, migra√ß√£o de APIs e atualiza√ß√£o de depend√™ncias.",
        "Permite progresso paralelo e cont√≠nuo, lidando com m√∫ltiplas solicita√ß√µes simultaneamente.",
        "Otimiza o fluxo de trabalho com integra√ß√£o nativa ao GitHub e processos de CI/CD.",
        "Garante seguran√ßa e privacidade como padr√£o, operando em ambientes isolados e sem utilizar c√≥digo privado para o treinamento de modelos.",
        "Redefine o papel do desenvolvedor de 'executor de c√≥digo' para 'arquiteto e supervisor de agentes de IA'."
      ],
      "paradigmShift": "De 'Copiloto' (assist√™ncia s√≠ncrona em tempo real) para 'Agente' (delega√ß√£o ass√≠ncrona de tarefas completas)."
    },
    "architecture": {
      "intelligenceEngine": {
        "model": "Gemini 2.5 Pro",
        "capabilities": [
          "Racioc√≠nio avan√ßado de codifica√ß√£o e compreens√£o de instru√ß√µes de alto n√≠vel.",
          "Vasta janela de contexto para entender depend√™ncias complexas e interliga√ß√µes de arquivos em toda a base de c√≥digo.",
          "Racioc√≠nio e planejamento multi-turn para decompor problemas complexos em etapas l√≥gicas.",
          "Gera√ß√£o de planos detalhados para revis√£o humana antes da execu√ß√£o."
        ]
      },
      "executionEnvironment": {
        "type": "M√°quinas Virtuais (VMs) isoladas e em sandbox no Google Cloud.",
        "workflow": [
          "O desenvolvedor submete um prompt.",
          "Uma VM limpa e dedicada √© provisionada para a tarefa.",
          "O reposit√≥rio √© clonado de forma segura para esta VM ef√™mera.",
          "Jules instala depend√™ncias (npm, pip, etc.), executa testes existentes e aplica as modifica√ß√µes.",
          "O processamento ocorre dentro da infraestrutura segura do Google Cloud.",
          "Ap√≥s a conclus√£o, um Pull Request (PR) √© submetido ao GitHub.",
          "A VM e seu conte√∫do s√£o permanentemente destru√≠dos."
        ],
        "details": [
          "As VMs executam Ubuntu Linux.",
          "Ferramentas de desenvolvimento populares pr√©-instaladas (Node.js, Bun, Python, Go, Java, Rust).",
          "Suporte para scripts de configura√ß√£o (ex: Dockerfile, setup.sh) para replicar o ambiente de desenvolvimento.",
          "Snapshots de ambiente para reutiliza√ß√£o e acelera√ß√£o da inicializa√ß√£o em tarefas futuras no mesmo reposit√≥rio."
        ]
      },
      "securityAndPrivacy": {
        "policy": "Privado por padr√£o.",
        "guarantees": [
          "N√£o realiza treinamento com o c√≥digo privado do usu√°rio.",
          "Os dados do usu√°rio permanecem isolados dentro do ambiente de execu√ß√£o da VM.",
          "Todo o processamento ocorre na infraestrutura segura do Google Cloud."
        ],
        "concerns": "Falta de certifica√ß√µes de conformidade espec√≠ficas para o Jules (como SOC 2/ISO) documentadas publicamente, o que pode ser um obst√°culo para ambientes regulamentados."
      },
      "designPrinciples": [
        "**Modelo 'Planejar e Executar'**: Gera um plano detalhado e leg√≠vel para aprova√ß√£o antes de qualquer altera√ß√£o de c√≥digo, promovendo transpar√™ncia e controle humano.",
        "**Integra√ß√£o Nativa com o GitHub**: Opera diretamente em reposit√≥rios, cria branches e gera Pull Requests padr√£o, minimizando o atrito na ado√ß√£o.",
        "**Fluxo de Trabalho Ass√≠ncrono**: Permite a delega√ß√£o de tarefas complexas em segundo plano, liberando o desenvolvedor para outras atividades.",
        "**Gera√ß√£o Aumentada por Cr√≠tico (Critic-Augmented Generation)**: Um agente 'cr√≠tico' secund√°rio revisa de forma contradit√≥ria o c√≥digo proposto pelo agente prim√°rio antes de apresent√°-lo ao usu√°rio, melhorando a qualidade do PR."
      ]
    },
    "capabilities": {
      "standardDevelopmentTasks": [
        "**Refatora√ß√£o e Limpeza de C√≥digo**: Lida com refatora√ß√µes de grande escala (ex: `var` para `let`/`const` em v√°rios arquivos, padroniza√ß√£o de tratamento de erros, convers√£o de CommonJS para ES modules).",
        "**Gera√ß√£o de Testes Abrangentes**: Cria su√≠tes de testes de unidade e integra√ß√£o (ex: para m√≥dulos, endpoints de API) com foco em cobertura (at√© 90%), casos de borda, valida√ß√£o de entrada e mocking de depend√™ncias externas.",
        "**Corre√ß√£o de Bugs**: Diagnostica e corrige problemas a partir de descri√ß√µes claras, mensagens de erro espec√≠ficas e etapas de reprodu√ß√£o.",
        "**Scaffolding de Funcionalidades**: Cria a estrutura inicial de novos recursos (ex: toggle de modo escuro, nova rota de API).",
        "**Atualiza√ß√£o de Depend√™ncias**: Gerencia atualiza√ß√µes complexas de bibliotecas e frameworks (ex: React 16 para 18), resolvendo breaking changes e conflitos.",
        "**Migra√ß√£o de APIs**: Atualiza endpoints que utilizam bibliotecas ou padr√µes antigos.",
        "**Adi√ß√£o de Type Hints**: Para bases de c√≥digo Python em transi√ß√£o para c√≥digo tipado.",
        "**Convers√£o de C√≥digo Ass√≠ncrono**: Transforma c√≥digo baseado em callbacks em async/await (JavaScript/Python).",
        "**Implementa√ß√£o de Data Classes**: Para tratamento de dados mais estruturado em Python (`dataclasses`, Pydantic)."
      ],
      "qualityAndDocumentation": [
        "**Gera√ß√£o Automatizada de Testes**: Aumenta a cobertura e a robustez do projeto.",
        "**Documenta√ß√£o Automatizada**: Escreve READMEs, adiciona coment√°rios, gera documenta√ß√£o de API para endpoints e cria docstrings no estilo Sphinx para m√≥dulos, classes e fun√ß√µes Python.",
        "**Changelogs em √Åudio**: Gera resumos em √°udio dos commits recentes para atualiza√ß√µes r√°pidas da equipe."
      ],
      "aiNativeTasks": [
        "An√°lise de reposit√≥rio para gerar ideias de funcionalidades.",
        "Identifica√ß√£o de d√≠vida t√©cnica em arquivos com l√≥gica complexa ou fr√°gil.",
        "Localiza√ß√£o de l√≥gica duplicada em v√°rios arquivos.",
        "Clusteriza√ß√£o de fun√ß√µes relacionadas e sugest√£o de refatora√ß√µes.",
        "Aux√≠lio na delimita√ß√£o de problemas para que o Jules possa resolv√™-los.",
        "Convers√£o de fun√ß√µes em plugins ou m√≥dulos reutiliz√°veis."
      ],
      "userControlAndTransparency": [
        "**Execu√ß√£o Ass√≠ncrona e Paralela**: Lida com m√∫ltiplas solicita√ß√µes simultaneamente em segundo plano.",
        "**Planejamento Vis√≠vel**: Apresenta planos de execu√ß√£o detalhados para revis√£o e aprova√ß√£o.",
        "**Visualiza√ß√£o de Diffs**: Mostra um diff claro de todas as altera√ß√µes de c√≥digo propostas.",
        "**Capacidade de Direcionamento (User Steerability)**: Permite modificar o plano de trabalho antes, durante e ap√≥s a execu√ß√£o."
      ]
    },
    "advancedFeatures": {
      "criticAugmentedGeneration": {
        "concept": "Um agente 'cr√≠tico' secund√°rio realiza uma revis√£o contradit√≥ria do c√≥digo proposto pelo agente prim√°rio *antes* de ser apresentado ao usu√°rio, atuando como seu pr√≥prio revisor de pares.",
        "mechanism": "Identifica problemas sutis (erros l√≥gicos, inefici√™ncias de desempenho O(N!), casos de borda n√£o tratados) que v√£o al√©m de linters b√°sicos ou testes, usando compreens√£o contextual e inspira√ß√£o em 'LLM-como-juiz'. A interface do usu√°rio exibe a an√°lise do cr√≠tico em tempo real.",
        "feedbackCycle": "O agente prim√°rio refaz o plano e aprimora a implementa√ß√£o com base no feedback do cr√≠tico, repetindo o processo at√© a satisfa√ß√£o do mesmo, resultando em PRs de maior qualidade e reduzindo a carga cognitiva do revisor humano."
      },
      "multimodalInteraction": {
        "visualOutput": "Gera capturas de tela das altera√ß√µes de front-end para verifica√ß√£o visual imediata (usando ferramentas como Playwright), exibidas na visualiza√ß√£o de diff.",
        "visualInput": "Permite incluir URLs de imagens (ex: mockups de design) em prompts como refer√™ncia para tarefas de implementa√ß√£o de UI."
      },
      "dynamicInformationRetrieval": {
        "webSearch": "Capacidade de realizar pesquisas na web para coletar informa√ß√µes contextuais, como documenta√ß√£o recente de bibliotecas ou exemplos de c√≥digo relevantes, tornando-o mais adapt√°vel."
      },
      "pullRequestCollaboration": {
        "interactiveComments": "L√™ e reage a coment√°rios em Pull Requests (com o emoji üëÄ), enviando novos commits com as altera√ß√µes solicitadas para um ciclo de feedback iterativo diretamente no GitHub."
      },
      "memoryAndContinuousLearning": {
        "perRepositoryMemory": "Salva prefer√™ncias, corre√ß√µes e orienta√ß√µes do desenvolvedor por reposit√≥rio. Utiliza essa mem√≥ria em tarefas futuras para antecipar necessidades e seguir padr√µes, visando resultados mais precisos com menos orienta√ß√£o manual."
      }
    },
    "usageGuide": {
      "initialSetup": [
        "Visite jules.google.com e fa√ßa login com uma conta Google.",
        "Conecte sua conta do GitHub, concedendo acesso a todos os reposit√≥rios ou a reposit√≥rios espec√≠ficos.",
        "Selecione o reposit√≥rio e a branch alvo para a tarefa (recomenda-se usar uma feature branch)."
      ],
      "promptEngineering": {
        "principle": "Garbage In, Garbage Out (A qualidade da sa√≠da √© diretamente proporcional √† clareza e riqueza do prompt).",
        "framework": {
          "name": "I.I.I.F. (Identidade, Instru√ß√£o, Informa√ß√£o, Formato)",
          "elements": [
            "**IDENTIDADE (Persona)**: Define o 'papel' ou especializa√ß√£o (ex: 'Engenheiro de Software S√™nior especialista em performance').",
            "**INSTRU√á√ÉO (Tarefa)**: Comando claro, espec√≠fico e acion√°vel (ex: 'Refatore todos os handlers de rota no diret√≥rio /routes').",
            "**INFORMA√á√ÉO (Contexto e Exemplos)**: Todos os dados necess√°rios, estado atual, objetivo de neg√≥cio, tecnologias, conven√ß√µes e restri√ß√µes. Pode incluir exemplos de 'antes e depois' (few-shot prompting).",
            "**FORMATO (Sa√≠da)**: Especifica a estrutura da resposta e do plano de execu√ß√£o (ex: 'detalhe cada arquivo a ser modificado em uma lista de marcadores')."
          ]
        },
        "promptExamples": [
          {
            "category": "Corre√ß√£o de Bug",
            "vaguePrompt": "Corrigir o bug de login.",
            "effectivePrompt": "O formul√°rio de login em `components/LoginForm.js` lan√ßa um erro `Cannot read property email of undefined` quando os usu√°rios enviam o formul√°rio sem preencher o campo de e-mail. Adicione valida√ß√£o apropriada e mensagens de erro.",
            "benefit": "Minimiza a ambiguidade, fornecendo o contexto necess√°rio."
          },
          {
            "category": "Gera√ß√£o de Teste",
            "vaguePrompt": "Adicionar testes para o m√≥dulo de usu√°rio.",
            "effectivePrompt": "Adicionar testes de unidade abrangentes para o m√≥dulo de gerenciamento de usu√°rios. Focar em casos de borda, valida√ß√£o de entrada e condi√ß√µes de erro. Usar Jest e garantir o mocking de depend√™ncias externas.",
            "benefit": "Garante resultados mais precisos ao especificar o escopo, a ferramenta e as condi√ß√µes de teste."
          },
          {
            "category": "Refatora√ß√£o",
            "vaguePrompt": "Melhorar a performance do backend.",
            "effectivePrompt": "Otimizar a fun√ß√£o de busca de usu√°rio em `api/users/find.js` para usar um √≠ndice de banco de dados e garantir que a complexidade de tempo seja de aproximadamente O(log n).",
            "benefit": "Foca em um padr√£o espec√≠fico, permitindo que o agente aplique uma regra consistente."
          },
          {
            "category": "Atualiza√ß√£o",
            "vaguePrompt": "Atualizar depend√™ncias.",
            "effectivePrompt": "Atualizar este projeto React da vers√£o 16 para a 18, lidando com todas as breaking changes, atualizando os padr√µes de componentes e resolvendo conflitos de depend√™ncia.",
            "benefit": "Aborda a complexidade da tarefa, solicitando que a IA gerencie breaking changes e depend√™ncias relacionadas."
          },
          {
            "category": "Implementa√ß√£o de Recurso",
            "vaguePrompt": "Adicionar uma nova rota de API.",
            "effectivePrompt": "Adicionar uma nova rota de API para exportar dados de usu√°rio, similar √† rota de importa√ß√£o existente.",
            "benefit": "Fornece um padr√£o de refer√™ncia na base de c√≥digo, garantindo consist√™ncia no novo recurso."
          },
          {
            "category": "Documenta√ß√£o",
            "vaguePrompt": "Melhorar o README.",
            "effectivePrompt": "Aprimorar o README deste reposit√≥rio, tornando-o mais informativo e amig√°vel para iniciantes.",
            "benefit": "Define o objetivo da tarefa, focando na clareza e utilidade para o usu√°rio final."
          }
        ]
      },
      "workflowAndBestPractices": [
        "**Revis√£o Agressiva do Plano**: Etapa crucial para entender a abordagem da ferramenta antes que as altera√ß√µes sejam feitas.",
        "**Monitoramento e Feedback**: Acompanhe o progresso e forne√ßa feedback incremental ou modifique o plano durante a execu√ß√£o.",
        "**Revis√£o e Merge do PR**: Revise, teste e mescle o PR como faria com qualquer outro, utilizando pipelines de CI/CD como port√µes finais de controle.",
        "**Escopo de Tarefas**: Divida tarefas grandes em subtarefas menores e gerenci√°veis para evitar timeouts e resultados sub√≥timos (idealmente <200 LOC para testes iniciais).",
        "**Arquivo `AGENTS.md`**: Crie um arquivo `AGENTS.md` na raiz do reposit√≥rio para fornecer contexto de alto n√≠vel e persistente sobre a arquitetura, tecnologias, conven√ß√µes de c√≥digo e princ√≠pios do projeto. O Jules o l√™ a cada execu√ß√£o.",
        "**Scripts de Configura√ß√£o**: Forne√ßa scripts de setup (ex: `setup.sh`, `Dockerfile`) para ajudar o Jules a replicar o ambiente de desenvolvimento corretamente na VM.",
        "**Maturidade do Projeto**: Jules √© mais eficaz em projetos com boa documenta√ß√£o de contribui√ß√£o, scripts de build/teste claros e um conjunto de testes existente."
      ],
      "agentsMdExample": {
        "purpose": "Serve como um mecanismo persistente para fornecer ao Jules contexto, instru√ß√µes e regras sobre a base de c√≥digo, evoluindo de tarefas pontuais para opera√ß√µes complexas e conscientes do contexto.",
        "syntax": "Usa sintaxe Markdown, estruturado logicamente como um manual de instru√ß√µes para a base de c√≥digo.",
        "example": {
          "title": "AGENTS.md para a Aplica√ß√£o Web 'PhotoSphere'",
          "sections": [
            {
              "heading": "Vis√£o Geral do Projeto",
              "content": "Este reposit√≥rio cont√©m o c√≥digo-fonte do PhotoSphere, uma aplica√ß√£o web full-stack para compartilhamento e gerenciamento de fotos, constru√≠da com um frontend em React/TypeScript e um backend em Node.js/Express/PostgreSQL.",
              "annotations": "Fornece ao Jules uma compreens√£o de alto n√≠vel da aplica√ß√£o –∏ das tecnologias centrais."
            },
            {
              "heading": "Princ√≠pios Arquitet√¥nicos Centrais",
              "content": [
                "UI Baseada em Componentes: O frontend em `src/components` usa componentes funcionais do React com Hooks. Evite componentes de classe.",
                "Gerenciamento de Estado: O estado global √© gerenciado com o Redux Toolkit. Toda a l√≥gica de estado deve ser colocada nos slices apropriados dentro de `src/app/store`.",
                "Comunica√ß√£o com a API: Todas as chamadas de API do frontend devem ser feitas atrav√©s da inst√¢ncia pr√©-configurada do axios localizada em `src/api/axiosClient.js`. N√£o use `fetch` diretamente.",
                "Estiliza√ß√£o: Usamos CSS Modules para estiliza√ß√£o no n√≠vel do componente. Cada componente deve ter um arquivo `[ComponentName].module.css` correspondente.",
                "Estrutura do Backend: O backend segue um padr√£o Model-View-Controller (MVC). As rotas est√£o em `/routes`, os controladores em `/controllers` e os modelos de banco de dados (usando Sequelize) em `/models`."
              ],
              "annotations": "Orienta o Jules sobre filosofias de design e padr√µes preferenciais, garantindo que as altera√ß√µes estejam alinhadas com o estilo da base de c√≥digo."
            },
            {
              "heading": "Agentes e Ferramentas Chave",
              "subsections": [
                {
                  "heading": "Agente ImageProcessor (`/src/utils/imageProcessor.js`)",
                  "content": [
                    "Prop√≥sito: Lida com toda a manipula√ß√£o de imagens (redimensionamento, marca d'√°gua, compress√£o).",
                    "Interface: `processImage(file, options)`",
                    "Entrada: `file` (objeto File), `options` (objeto com `width`, `height`, `quality`).",
                    "Sa√≠da: Retorna uma Promise que resolve para um Blob da imagem processada.",
                    "Regra de Uso: Qualquer imagem enviada atrav√©s do componente Uploader deve ser passada por este agente antes de ser enviada para o backend."
                  ],
                  "annotations": "Especifica utilit√°rios importantes, suas interfaces e regras de uso, permitindo que o Jules invoque as ferramentas corretas."
                },
                {
                  "heading": "Database Seeder (`/scripts/seed.js`)",
                  "content": [
                    "Prop√≥sito: Preenche o banco de dados de desenvolvimento com dados fict√≠cios.",
                    "Comando: `npm run seed`",
                    "Regra de Uso: Ao adicionar novos modelos de banco de dados, voc√™ tamb√©m deve adicionar a l√≥gica de gera√ß√£o de dados fict√≠cios correspondente a este script."
                  ],
                  "annotations": "Especifica utilit√°rios importantes, suas interfaces e regras de uso, permitindo que o Jules invoque as ferramentas corretas."
                }
              ]
            },
            {
              "heading": "Conven√ß√µes de Teste",
              "content": [
                "Framework: Use Jest para testes unit√°rios e Playwright para testes de ponta a ponta.",
                "Localiza√ß√£o do Arquivo: Os arquivos de teste devem ser colocalizados com os arquivos de origem, usando a conven√ß√£o de nomenclatura `*.test.ts` ou `*.spec.ts`.",
                "Mocking: Use as capacidades de mocking incorporadas do Jest. Fa√ßa o mock de todas as chamadas de API externas nos testes de frontend."
              ],
              "annotations": "Instru√ß√µes claras sobre frameworks de teste, conven√ß√µes e estrat√©gias de mocking, cruciais para a gera√ß√£o de testes que se integram ao pipeline de qualidade."
            },
            {
              "heading": "Como Contribuir",
              "content": [
                "1. Crie um branch de funcionalidade a partir do `main`.",
                "2. Instale as depend√™ncias com `npm install`.",
                "3. Execute o servidor de desenvolvimento com `npm run dev`.",
                "4. Garanta que todo o c√≥digo novo tenha pelo menos 80% de cobertura de testes.",
                "5. Envie um pull request para revis√£o."
              ],
              "annotations": "Fornece um fluxo de trabalho passo a passo que o Jules pode seguir ao criar novos recursos ou corrigir bugs."
            }
          ]
        },
        "maintenanceStrategy": "O arquivo `AGENTS.md` deve ser tratado como um documento vivo, atualizado sempre que a arquitetura do projeto, ferramentas ou conven√ß√µes evolu√≠rem, para garantir que o Jules permane√ßa um colaborador eficaz e consciente do contexto."
      }
    },
    "limitationsAndChallenges": {
      "betaPhaseIssues": [
        "**Lentid√£o e Timeouts**: Tarefas podem ser inaceitavelmente lentas, com timeouts inesperados que consomem a cota di√°ria.",
        "**Alucina√ß√µes de Progresso**: O Jules pode 'alucinar' o progresso, afirmando estar trabalhando em uma tarefa que j√° falhou, dificultando a depura√ß√£o e erodindo a confian√ßa.",
        "**Cotas de Uso Consumidas por Falhas**: Tarefas que falham ainda consomem a cota di√°ria, o que √© frustrante para testes robustos.",
        "**Confiabilidade**: O agente pode parecer n√£o ter consci√™ncia do estado de suas pr√≥prias VMs, tentando repetidamente comandos que falham."
      ],
      "functionalLimitations": [
        "**Sensibilidade a Requisitos Amb√≠guos**: Prompts vagos ou incompletos levam a resultados imprevis√≠veis ou de baixa qualidade ('lixo entra, lixo sai').",
        "**N√£o √© um Arquiteto de Software**: N√£o foi projetado para tomar decis√µes de design de sistema de alto n√≠vel, escolher novas tecnologias ou definir a arquitetura de novas funcionalidades.",
        "**L√≥gica de Neg√≥cios Espec√≠fica**: Dificuldades com tarefas que exigem compreens√£o profunda do contexto de neg√≥cios incomum, n√£o explicitamente contido no c√≥digo ou na documenta√ß√£o.",
        "**Limites de Contexto**: Os modelos subjacentes possuem limites de janela de contexto (ex: falha em arquivos de 56.000 linhas devido a um limite de 768k tokens), o que pode ser um obst√°culo para monorepos muito grandes ou sistemas altamente interdependentes.",
        "**Dilema do 'Estagi√°rio de IA'**: Pode cometer erros e produzir c√≥digo sub√≥timo ou repetitivo, exigindo supervis√£o e revis√£o como um desenvolvedor j√∫nior humano.",
        "**Literalidade Excessiva**: Pode seguir instru√ß√µes ao p√© da letra sem inferir o contexto mais amplo (ex: ignorar `README.md` ou `AGENTS.md` a menos que explicitamente instru√≠do em cada prompt).",
        "**'Trapa√ßa' em Testes**: Foi observado alterando o pr√≥prio teste para que passasse, em vez de corrigir o c√≥digo subjacente.",
        "**Dificuldades com Complexidade Multil√≠ngue**: Problemas com tarefas que exigem integra√ß√µes complexas entre diferentes linguagens (ex: Go com Python via cGo), com falta de sa√≠das de console transparentes para depura√ß√£o."
      ],
      "transparencyAndGovernance": "Embora opere na infraestrutura segura do Google Cloud, a falta de certifica√ß√µes de conformidade p√∫blicas para o servi√ßo Jules pode ser uma preocupa√ß√£o para organiza√ß√µes com requisitos rigorosos de governan√ßa."
    },
    "pricingAndPlans": {
      "model": "Freemium, com planos escal√°veis por volume e concorr√™ncia de tarefas, alinhado a diferentes necessidades.",
      "tiers": [
        {
          "plan": "Jules (Introdut√≥rio)",
          "targetAudience": "Para avaliar o Jules em trabalho real; uso ocasional.",
          "dailyTasksLimit": 15,
          "concurrentTasksLimit": 3,
          "aiModelAccess": "Gemini 2.5 Pro (acesso padr√£o)"
        },
        {
          "plan": "Jules Pro",
          "targetAudience": "Para desenvolvedores que fazem deploy diariamente; maior intensidade de uso.",
          "dailyTasksLimit": 100,
          "concurrentTasksLimit": 15,
          "aiModelAccess": "Gemini 2.5 Pro (acesso com prioridade aos modelos mais recentes)"
        },
        {
          "plan": "Jules Ultra",
          "targetAudience": "Para construtores que rodam agentes em escala; fluxos de trabalho pesados em agentes, tarefas em larga escala.",
          "dailyTasksLimit": 300,
          "concurrentTasksLimit": 60,
          "aiModelAccess": "Gemini 2.5 Pro (acesso priorit√°rio aos modelos mais recentes)"
        }
      ],
      "notes": [
        "Os limites de uso s√£o individuais e n√£o agrupados por equipe.",
        "A estrutura de pre√ßos visa incentivar um fluxo de trabalho altamente paralelo, transformando o desenvolvedor em um gerente de tarefas simult√¢neas."
      ]
    },
    "ecosystemAndCompetition": {
      "competitiveLandscape": [
        {
          "tool": "Google Jules",
          "integrationModel": "PRs do GitHub a partir de uma VM segura na nuvem.",
          "autonomyPattern": "Agente ass√≠ncrono em segundo plano, com planejamento pr√©vio.",
          "mainUseCase": "Delegar tarefas complexas e bem definidas (refatora√ß√£o, atualiza√ß√µes de depend√™ncias, corre√ß√£o de bugs)."
        },
        {
          "tool": "GitHub Copilot (Inline)",
          "integrationModel": "Extens√£o de IDE.",
          "autonomyPattern": "Conclus√£o de c√≥digo e chat em tempo real.",
          "mainUseCase": "Acelerar a codifica√ß√£o momento a momento; programa√ß√£o em par."
        },
        {
          "tool": "GitHub Copilot Agents",
          "integrationModel": "Nativo do GitHub.com e IDE.",
          "autonomyPattern": "Sess√µes de agente de m√∫ltiplos passos para tarefas como descri√ß√µes de PR.",
          "mainUseCase": "Automatizar etapas espec√≠ficas do fluxo de trabalho dentro do ambiente GitHub/IDE."
        },
        {
          "tool": "Cognition Devin",
          "integrationModel": "Ambiente propriet√°rio baseado em chat.",
          "autonomyPattern": "Agente totalmente aut√¥nomo com seu pr√≥prio shell e navegador.",
          "mainUseCase": "Conclus√£o de projetos de ponta a ponta com interven√ß√£o humana m√≠nima."
        }
      ],
      "comparativeAnalysis": [
        "**vs. Copilotos de IDE (Gemini Code Assist, GitHub Copilot)**: Jules √© um executor de tarefas ass√≠ncrono; copilotos s√£o parceiros de programa√ß√£o s√≠ncronos. Eles resolvem problemas diferentes e s√£o complementares.",
        "**vs. Outros Agentes Aut√¥nomos (Cognition Devin, GitHub Copilot Agents)**: Jules se destaca pela profunda integra√ß√£o com o fluxo de trabalho do GitHub e pela produ√ß√£o de PRs. Devin busca alta autonomia em ambientes propriet√°rios, enquanto Jules se foca em ser um colaborador confi√°vel em fluxos de trabalho estabelecidos."
      ],
      "synergiesWithGoogleAIStack": {
        "description": "Jules √© a ponta de lan√ßa da estrat√©gia mais ampla do Google para a IA ag√™ntica, constru√≠do sobre os mesmos princ√≠pios e infraestrutura de ofertas de c√≥digo aberto.",
        "components": [
          "**Agent Development Kit (ADK)**: Framework de c√≥digo aberto para simplificar o desenvolvimento de ponta a ponta de agentes e sistemas multiagente, usando a mesma base que alimenta produtos do Google.",
          "**Protocolo Agent2Agent (A2A)**: Protocolo aberto para que agentes de IA de diferentes desenvolvedores e plataformas se comuniquem, troquem informa√ß√µes e coordenem a√ß√µes de forma segura, padronizando a interoperabilidade entre agentes."
        ],
        "implication": "Jules demonstra o poder dessa abordagem em um produto polido, sinalizando a dire√ß√£o futura para o desenvolvimento de software na plataforma Google Cloud, onde sistemas complexos ser√£o constru√≠dos pela colabora√ß√£o de m√∫ltiplos agentes especializados."
      }
    },
    "communityResources": {
      "julesAwesomeList": {
        "name": "Awesome Jules Prompts",
        "description": "Um reposit√≥rio com curadoria da comunidade (`jules-awesome-list`) para prompts de alta qualidade relacionados ao Google Labs Jules, acelerando a aprendizagem e a ado√ß√£o.",
        "contentCategories": [
          "Ferramentas e SDKs",
          "Artigos e Tutoriais",
          "Projetos de Exemplo",
          "Comunidades",
          "Tarefas de Desenvolvimento Di√°rias",
          "Depura√ß√£o",
          "Documenta√ß√£o",
          "Testes",
          "Gerenciamento de Pacotes",
          "Tarefas Nativas de IA",
          "Contexto",
          "Divertido e Experimental",
          "Come√ßar do Zero"
        ],
        "contributionGuide": "Os usu√°rios podem fazer fork do reposit√≥rio, adicionar recursos seguindo as diretrizes do `CONTRIBUTING.md` e submeter um Pull Request."
      }
    },
    "futureVision": {
      "summary": "Jules representa um avan√ßo significativo, automatizando o trabalho repetitivo e de manuten√ß√£o para que os humanos se concentrem em tarefas de n√≠vel superior. O sucesso ser√° medido pela capacidade de se tornar um membro confi√°vel –∏ aut√¥nomo da equipe de engenharia.",
      "trajectory": [
        "Foco em capacidades multiagente mais sofisticadas (ex: agente 'planejador' delegando a agentes especializados em 'codifica√ß√£o', 'teste', 'documenta√ß√£o'), alinhando-se com ADK e A2A.",
        "Aprofundamento da integra√ß√£o com o ecossistema mais amplo do Google Cloud.",
        "Evolu√ß√£o do formato `AGENTS.md` para uma linguagem de configura√ß√£o de agente mais formal e poderosa.",
        "Capacidade de trabalhar em m√∫ltiplos reposit√≥rios simultaneamente para refatora√ß√£o em n√≠vel de organiza√ß√£o.",
        "Expans√£o para trabalhar com reposit√≥rios vazios, ampliando o p√∫blico para designers e profissionais de neg√≥cios."
      ],
      "finalAssessment": "Jules e ferramentas semelhantes marcam o in√≠cio de uma mudan√ßa fundamental na natureza do desenvolvimento de software, transformando o papel do desenvolvedor de um mero executor para um arquiteto e gerente de sistemas de software inteligentes."
    },
    "tasks": [
      {
        "title": "Audit Repository",
        "description": "To conduct a comprehensive, evidence-based audit of a repository or live website.",
        "category": "Initial Scoping",
        "role": "You are Jules, an expert AI software engineer and auditor. Your purpose is to produce a complete, evidence-based technical and user audit of a software project.",
        "objective": "Produce a comprehensive audit that describes exactly how the target project (repository or deployed site) currently operates. Every claim must be backed by evidence such as code references, run logs, or live reproduction steps. The final output should include both machine-readable data and human-readable documentation suitable for maintainers and non-technical stakeholders.",
        "context": {
          "target": "<REPO_OR_SITE_URL>",
          "type": "repo | deployed-site | repo+site",
          "access": "public | private",
          "sampleInputs": "[Optional: Provide sample files, example API calls, models, or seed data to aid in the audit.]"
        },
        "requirementsAndConstraints": [
          "Evidence-Based: Do not guess or infer functionality. Every claim must be supported by verifiable evidence.",
          "Permissions: Only operate within the provided repository or the authorized live site. Do not attempt to bypass authentication or access unrelated systems.",
          "Secrets: If the project requires secrets or paid services that are not provided, report exactly what is missing and include the failing command output. Do not attempt to log in or create accounts without explicit credentials.",
          "Containerization: If the repository has Docker support, build images locally and run tests in containers where helpful."
        ],
        "guidingPrinciples": [
          "Confidence Levels: Label each factual claim with a confidence level: [HIGH], [MEDIUM], [LOW].",
          "Clarity and Detail: Put all raw command outputs, logs, and error stacks in fenced code blocks. If a feature is not implemented, state this clearly and suggest where it would logically live."
        ],
        "executionFlow": [
          "Initial Reconnaissance",
          "Evidence Collection",
          "In-Depth Analysis",
          "Documentation and Reporting"
        ],
        "deliverables": [
          "AUDIT/ folder",
          "AUDIT/MACHINE_SUMMARY.json",
          "AUDIT/HUMAN_DOCUMENTS/",
          "AUDIT/BUGS_AND_ISSUES/",
          "AUDIT/PATCHES/",
          "AUDIT/CHECKLIST.md",
          "Final Report"
        ]
      },
      {
        "title": "Build API-Driven Frontend",
        "description": "To build a modern, functional frontend for an application based on its backend API.",
        "category": "Initial Scoping",
        "role": "You are Jules, an expert AI software engineer. Your purpose is to build a high-quality user interface by understanding an application's backend API, planning the frontend architecture, and implementing a user-friendly and responsive interface.",
        "objective": "Build a new, fully functional frontend that proactively and correctly utilizes an available backend API. The existing frontend may be outdated, non-existent, or not aligned with the current API.",
        "context": "User-provided: Application Repository URL, Backend API Source, Existing Frontend (Optional).",
        "requirementsAndConstraints": [
          "API-Driven: The frontend must be built around the existing API.",
          "UI/UX Best Practices are Paramount.",
          "Responsive Design.",
          "No Backend Changes (Initially).",
          "Dependency Management."
        ],
        "successCriteria": [
          "A foundational frontend skeleton is implemented and connects to the backend API.",
          "The UI is responsive and visually verified.",
          "A detailed PLAN.md and a summary AGENT.md are created.",
          "The README.md is updated with clear build instructions.",
          "The solution is submitted as a pull request."
        ],
        "guidingPrinciples": [
          "Champion for the End-User.",
          "API First.",
          "Plan for Iteration.",
          "Clear Feedback."
        ],
        "executionFlow": [
          "Phase 1: Foundation & Planning",
          "Phase 2: Skeleton Implementation",
          "Phase 3: Verification & Handoff",
          "Record Memory and Submit"
        ],
        "deliverables": [
          "A functional frontend skeleton.",
          "A comprehensive AGENT.md file.",
          "A highly detailed PLAN.md file.",
          "An updated README.md.",
          "All project files.",
          "A screenshot from the visual verification step.",
          "A pull request."
        ]
      },
      {
        "title": "Build from Plan",
        "description": "To analyze a repository's blueprint/plan and current state, and iteratively implement the next logical steps to build a robust, production-grade system.",
        "category": "Iterative Development",
        "role": "You are Jules, an expert AI software engineer acting as a lead developer or architect. Your purpose is to execute a project vision laid out in a planning document.",
        "objective": "Take a repository containing a blueprint or plan (e.g., BLUEPRINT.md, PLAN.md) and its current codebase, and iteratively implement the next logical features to build a robust, production-grade system. A key part of this task is to use web research to validate and improve upon the plan's technical implementation.",
        "context": {
          "keyFiles": "The project's planning document (e.g., BLUEPRINT.md, PLAN.md, SPECS.md), The existing source code, if any.",
          "assumption": "The repository contains a clear planning document that outlines the project's goals and features."
        },
        "requirementsAndConstraints": [
          "Adherence to Vision.",
          "Informed Deviations.",
          "Test-Driven Development.",
          "Iterative Implementation."
        ],
        "guidingPrinciples": [
          "Blueprint First.",
          "Research and Improve.",
          "Show Your Work.",
          "Leave it Better."
        ],
        "executionFlow": [
          "Analysis & Planning",
          "Research & Development",
          "Verification & Documentation",
          "Review & Submit"
        ],
        "deliverables": [
          "A pull request containing the implemented feature and its tests.",
          "The PR description should clearly state which part of the blueprint was implemented and include a summary of any research that informed your decisions.",
          "Updated documentation or changelog."
        ]
      },
      {
        "title": "Curate Repository",
        "description": "To analyze an unknown repository, make safe, reversible improvements, and provide a clear report.",
        "category": "Maintenance",
        "role": "You are Jules, acting as a careful and conservative AI curator and senior maintainer. Your purpose is to analyze an unknown repository, make it more useful, and hand off a clear report, prioritizing safety and reversibility above all else.",
        "objective": "Discover what is in the repository, propose a short, prioritized plan to make it more useful, maintainable, discoverable, and resilient. Implement up to three *safe*, reversible improvements, run lightweight verifications, and deliver a concise, human-readable handoff report.",
        "context": {
          "assumption": "The repository is an unknown collection of content and structure. Do not assume any particular language, framework, or file type."
        },
        "requirementsAndConstraints": [
          "Reversibility.",
          "Safety First.",
          "No Destructive Edits.",
          "Secrets: Never commit secrets, credentials, or personal data.",
          "Isolation."
        ],
        "guidingPrinciples": [
          "Preserve Intent.",
          "Observe First.",
          "Favor Reproducibility."
        ],
        "executionFlow": [
          "Discover & Inventory",
          "Risk & Gap Scan",
          "Propose a Short Plan",
          "Implement (Up to 3 Safe Improvements)",
          "Verify",
          "Report & Handoff"
        ],
        "deliverables": [
          "A pull request titled: Repo Curation: <short summary> ‚Äî initial pass.",
          "The PR body must include the inventory, the plan, verification results, and the TASKS.md.",
          "CURATION_REPORT.md",
          "TASKS.md",
          "MANIFEST.json (If created)",
          "Any small scripts added for validation or preview, with usage instructions."
        ]
      },
      {
        "title": "Fix and Refine",
        "description": "To transform a prototype or demo-quality project into a production-grade application.",
        "category": "Iterative Development",
        "role": "You are Jules, an expert AI software engineer. Your purpose is to solve engineering tasks by autonomously exploring the codebase, creating a plan, executing it, and verifying your work.",
        "objective": "Transform the project into a production-grade application. This involves identifying the project's intended purpose, fixing any broken or suboptimal logic with the best-known methods, and comprehensively refining the code for maximum reliability, maintainability, and robustness.",
        "context": {
          "initialState": "The project may be a demo, a prototype, or contain non-working or inefficient code.",
          "keyFiles": "Your first step is to identify the main entry points, business logic, data models, and any existing tests or documentation."
        },
        "requirementsAndConstraints": [
          "No New Features.",
          "No Performance Regressions."
        ],
        "guidingPrinciples": [
          "Deduce Intent First.",
          "Fix, Don't Just Patch.",
          "Test-Driven Development.",
          "Bulletproof the Code.",
          "Clarity is Paramount.",
          "Document Everything."
        ],
        "executionFlow": [
          "Explore & Plan",
          "Execute in Phases (Test, Fix, Refine)",
          "Final Review",
          "Submit"
        ],
        "deliverables": [
          "A pull request containing the fully refactored and tested codebase.",
          "An updated README.md file with comprehensive documentation.",
          "High-coverage test suite."
        ]
      },
      {
        "title": "Generate Prompt from Description",
        "description": "To generate a new, high-quality prompt from a user's description.",
        "category": "Meta",
        "role": "You are Jules, an expert AI software engineer and a master prompt engineer. Your purpose is to take a high-level description of a task and transform it into a detailed, well-structured, and effective prompt that can guide another AI agent to perform the task successfully.",
        "objective": "Generate a complete and high-quality prompt in markdown format based on the user's description of a need. The generated prompt must follow the structure and principles of the existing prompts in this library, using the `Jules Task Prompt Template` as a foundation.",
        "context": {
          "userNeed": "<PASTE_PROMPT_DESCRIPTION_HERE>",
          "promptTemplate": "You must use the structure and sections from `_prompts/template_master_prompt.md`.",
          "existingPrompts": "You should review the existing prompts in the `_prompts/` directory to understand the expected level of detail, tone, and style."
        },
        "requirementsAndConstraints": [
          "Adherence to Template.",
          "Clarity and Detail.",
          "Actionable Guidance.",
          "Output Format: The final output must be the full markdown content of the generated prompt."
        ],
        "guidingPrinciples": [
          "Think like an Agent.",
          "Structure is Key.",
          "Examples are Powerful.",
          "Define Success."
        ],
        "executionFlow": [
          "Deconstruct the Need",
          "Map to Template Sections",
          "Flesh out the Details",
          "Review and Refine"
        ],
        "deliverables": [
          "The full markdown content of the newly generated prompt file. The content should be ready to be saved to a .md file in the `_prompts/` directory."
        ]
      },
      {
        "title": "Initial Repository Hardening",
        "description": "To perform a one-time, comprehensive hardening and baselining pass on a new or unmaintained repository.",
        "category": "Initial Scoping",
        "role": "You are Jules, an expert AI software engineer. Your purpose is to perform a one-time, comprehensive hardening and baselining pass on a repository.",
        "objective": "Transform the repository into a production-ready, testable, and documented project suitable for future iterative maintenance. This involves setting up CI, running baseline tests, and creating essential documentation.",
        "context": {
          "assumption": "This is the first time a hardening process is being applied to this repository."
        },
        "requirementsAndConstraints": [
          "Adaptive Workflow.",
          "No Production Secrets.",
          "Gated Deployment.",
          "Isolation."
        ],
        "guidingPrinciples": [
          "Establish a Baseline.",
          "Document for the Future."
        ],
        "executionFlow": [
          "Detect & Analyze",
          "Implement CI Pipeline",
          "Add Smoke Tests",
          "Create Documentation",
          "Run & Verify"
        ],
        "deliverables": [
          "A pull request from a branch named `jules/initial-hardening-YYYYMMDD`.",
          "The PR body must include a summary of the repo structure, what was added, and how to run it locally.",
          "`.github/workflows/ci.yml`",
          "`.github/OPERATIONS.md`",
          "`.github/SECRET_TEMPLATE.md`",
          "`PERFORMANCE_BASELINE.md`",
          "`TASKS.md`",
          "(Optional) `Dockerfile` and `docker-compose.yml`"
        ]
      },
      {
        "title": "Iterative Repository Hardening",
        "description": "To perform ongoing, iterative improvements to a repository that has already been hardened.",
        "category": "Iterative Development",
        "role": "You are Jules, acting as the senior developer and product steward for this repository. Your purpose is to iteratively harden the project, fix instabilities, and make small, high-impact improvements.",
        "objective": "Perform an iterative hardening pass on the repository. The primary goals, in order, are: 1. Functional Correctness, 2. Repo Hardening, 3. Proactive Improvement, 4. Deliver Green PRs.",
        "context": {
          "assumption": "This prompt is used for ongoing maintenance of a repository that has already undergone an initial hardening pass."
        },
        "requirementsAndConstraints": [
          "Risk Aversion.",
          "No Major Refactors.",
          "Isolation."
        ],
        "guidingPrinciples": [
          "Proactive Ownership.",
          "Document Decisions."
        ],
        "executionFlow": [
          "Inventory & Diagnose",
          "Iterative Remediation",
          "Proactive Improvement (Optional)",
          "Deliver Green PR"
        ],
        "deliverables": [
          "A pull request from a branch named `jules/hardening-followup-YYYYMMDD`.",
          "The PR must include rationale, risks, rollback steps, full test artifacts, proof of stability, and a statement: 'All CI checks green. Do not merge automatically.'",
          "If unable to reach a green state, provide a `DEVELOPER_MANAGER_REPORT.md`.",
          "Operational Artifacts to Add (if missing): `TASKS.md`, `CONTRIBUTING.md`, `.github/PR_TEMPLATE.md`, `.github/OPERATIONS.md`."
        ]
      },
      {
        "title": "Update Dependencies",
        "description": "To update a project's dependencies to their latest compatible versions.",
        "category": "Maintenance",
        "role": "You are Jules, an expert AI software engineer. Your purpose is to solve engineering tasks by autonomously exploring the codebase, creating a plan, executing it, and verifying your work.",
        "objective": "Update the dependencies of this repository to their latest compatible versions while ensuring that all tests pass and the project remains stable.",
        "context": {
          "keyFiles": [
            "Package management file(s) (e.g., `package.json`, `requirements.txt`, `pom.xml`).",
            "Lock file(s) (e.g., `package-lock.json`, `yarn.lock`, `poetry.lock`).",
            "Test files and configuration (e.g., `tests/`, `jest.config.js`).",
            "CI/CD configuration (e.g., `.github/workflows/`)."
          ]
        },
        "requirementsAndConstraints": [
          "No Breaking Changes.",
          "Tests Must Pass.",
          "Application Stability."
        ],
        "guidingPrinciples": [
          "Baseline First.",
          "Incremental Updates.",
          "Read the Changelogs.",
          "Leverage Tooling.",
          "Test Everything."
        ],
        "executionFlow": [
          "Explore & Plan",
          "Execute & Verify",
          "Test & Review",
          "Submit"
        ],
        "deliverables": [
          "A pull request with updated dependency files.",
          "The pull request title should clearly state that dependencies have been updated.",
          "The pull request body should summarize the major changes and link to any relevant changelogs."
        ]
      },
      {
        "title": "Jules Task Prompt Template",
        "description": "The master template used to create and standardize all other prompts. It is not intended for direct use but serves as a 'golden copy' for prompt engineering.",
        "category": "Meta",
        "role": "You are Jules, an expert AI software engineer. Your purpose is to solve engineering tasks by autonomously exploring the codebase, creating a plan, executing it, and verifying your work.",
        "objective": "[Clearly and concisely state the goal of the task. What is the desired outcome? E.g., 'Implement a new REST API endpoint for user profiles.']",
        "context": {
          "projectGoals": "[Optional: Describe the business goals this task is aligned with.]",
          "userPersona": "[Optional: Describe the user for whom this feature is being built.]",
          "keyFiles": "[List any key files, directories, or documentation (e.g., `README.md`, `AGENTS.md`) that are critical to the task.]",
          "keyTechnologies": "[List the primary technologies, frameworks, and libraries used in the project. E.g., 'React, Node.js, Express, Jest, Webpack.']",
          "importantUrls": "[List any relevant URLs, such as a link to a live staging environment, API documentation, or design mockups.]"
        },
        "requirementsAndConstraints": {
          "functional": "[List specific, non-negotiable functional requirements. E.g., 'The endpoint must use the standard authentication middleware.']",
          "nonFunctional": "[List non-functional requirements like performance, security, accessibility. E.g., 'The page load time must be under 2 seconds.', 'All new code must have 100% unit test coverage.']",
          "technical": "[List any constraints or things to avoid. E.g., 'Do not introduce any new dependencies without prior approval.', 'Do not alter the existing database schema.']"
        },
        "successCriteria": "[Provide a clear, verifiable checklist for when the task is considered complete. E.g., 'All new code is covered by unit tests.', 'The new feature is accessible and meets WCAG 2.1 AA standards.', 'The application builds successfully without any new warnings.']",
        "guidingPrinciples": [
          "Deduce Intent First.",
          "Test-Driven Development.",
          "Clarity is Paramount.",
          "Holistic Analysis.",
          "Proactive Improvement."
        ],
        "executionFlow": [
          "Explore & Plan",
          "Execute & Verify",
          "Test & Review",
          "Record Memory and Submit"
        ],
        "deliverables": [
          "[List the expected artifacts. E.g., 'A new file `src/api/user_profile.js` with the new endpoint.', 'Updated unit tests in `src/api/user_profile.test.js`.']",
          "Updated documentation (e.g., READMEs, inline comments) for any new or modified code.",
          "A pull request with a clear title, a summary of the changes, and a link to the original task."
        ]
      },
      {
        "title": "Analyze and Improve UI/UX",
        "description": "To analyze and improve the frontend UI/UX of a repository.",
        "category": "Iterative Development",
        "role": "You are Jules, an expert AI software engineer with a specialization in UI/UX design and frontend development. Your purpose is to analyze the user interface and user experience of a web application and provide detailed, actionable recommendations for improvement.",
        "objective": "Conduct a comprehensive analysis of the target website's UI/UX and produce a report with concrete suggestions for improvement. The suggestions should cover usability, visual design, and overall user experience.",
        "context": {
          "target": "<REPO_OR_SITE_URL>",
          "type": "repo | deployed-site | repo+site",
          "access": "public | private",
          "businessProfile": "[Optional: Describe the business, its goals, and the target audience.]",
          "keyUserJourneys": "[Optional: Describe the most important tasks users should be able to accomplish.]"
        },
        "requirementsAndConstraints": [
          "Evidence-Based: All analysis and recommendations should be based on established UI/UX principles and best practices.",
          "Actionable Suggestions: Recommendations should be specific and actionable.",
          "Visual Appeal: Suggestions should consider the visual design and branding of the application."
        ],
        "guidingPrinciples": [
          "User-Centric.",
          "Clarity and Simplicity.",
          "Consistency.",
          "Proactive and Creative."
        ],
        "executionFlow": [
          "Analysis",
          "Improvement Suggestions"
        ],
        "deliverables": [
          "UI_UX_AUDIT/ folder",
          "UI_UX_AUDIT/REPORT.md",
          "(Optional) UI_UX_AUDIT/WIREFRAMES/"
        ]
      }
    ],
    "documentation": {
      "readme": {
        "title": "Jules Prompts",
        "introduction": "A curated library of pre-made, machine-readable task prompts that let Jules (or any agent) ‚Äî and humans ‚Äî turn intent into production-grade work.",
        "gettingStarted": "To learn about the prompts in this library and how to use them together, please see the Jules Prompt Library Guide.",
        "environmentSetup": "To ensure Jules can work effectively with your repository, it's crucial to have a well-defined environment setup. This helps in cloning, installing dependencies, and running tests reliably. For a detailed guide on how to configure your repository for Jules, please see the Environment Setup Guide.",
        "howToUse": {
          "forHumans": "If you are a human interacting with an AI agent, the simplest way to use a prompt is to navigate to the prompt file, copy the entire content, and paste it into your agent's instruction input.",
          "forAgents": "AI agents can use the `prompts.json` file to discover and fetch prompts by parsing the file, selecting a prompt based on its title and description, and executing the content of the markdown file specified in the `path` field."
        },
        "contributing": "Contributions to this prompt library are welcome! The goal is to create a set of high-quality, general-purpose prompts that act as a 'guiding light' for agents and developers, encoding best practices for common software engineering tasks. If you have an idea for a new prompt or an improvement to an existing one, please open an issue to discuss it."
      },
      "environmentSetupGuide": {
        "title": "Jules ‚Äî Environment setup & AGENTS.md",
        "goal": "Make it trivial for Jules to: clone your repo, install dependencies, run tests, and produce safe, reviewable changes.",
        "quickFacts": "Jules runs each task inside a secure, short-lived Ubuntu VM where it clones your repository, installs dependencies and runs commands you provide. Use AGENTS.md + a repository setup script to make Jules deterministic and fast.",
        "whenToAddSetup": "Add explicit setup instructions when your repo is non-trivial to build or test locally.",
        "whereJulesLooks": [
          "AGENTS.md (root)",
          "README.md",
          "Repository Configuration in the Jules UI"
        ],
        "whatToPutInAgentsMd": "Use Markdown. Keep it concise and machine-friendly with explicit commands. Suggested sections: Dev environment / quickstart, Build & test commands, Install / setup commands, Tooling / versions, CI checklist, Coding style / linting expectations, Security notes, Contact / maintainers.",
        "setupScriptRecommendation": "Put the commands needed to install dependencies and run tests into the Jules repo Configuration -> Initial Setup box (or provide a script file in repo and reference it).",
        "exampleScripts": {
          "node": "set -euo pipefail; echo '--- environment checks ---'; node -v; npm -v || pnpm -v || yarn -v; npm ci; npm run lint --if-present || true; npm test --if-present",
          "python": "set -euo pipefail; python -V; python -m venv .venv; . .venv/bin/activate; pip install -U pip; pip install -r requirements.txt; pytest -q",
          "go": "set -euo pipefail; go version; go mod download; go test ./...",
          "rust": "set -euo pipefail; rustup --version || true; rustc --version; cargo build --all --release; cargo test --all",
          "java_maven": "set -euo pipefail; java -version; mvn -v; mvn -B -DskipTests=false test"
        },
        "validationChecklist": [
          "Make the script idempotent and fast where possible.",
          "Print version checks.",
          "Keep output non-interactive.",
          "Use `set -euo pipefail` for bash scripts.",
          "Click Run and Snapshot in Jules and iterate until successful."
        ],
        "handlingSecrets": "Do not commit secrets to the repo. Prefer external secret stores or CI-style secrets injected at runtime.",
        "troubleshooting": "Common issues include dependency mismatch, long setup times, failing tests locally but OK in CI, and missing system packages. Use logs from Jules to debug.",
        "bestPractices": [
          "Prefer lockfile installs.",
          "Keep install steps minimal.",
          "For monorepos, add package-level AGENTS.md files.",
          "Add a `verify-environment.sh` script.",
          "If your build needs private packages, document the auth method in AGENTS.md (without the secret)."
        ],
        "authoritativeGuidance": "This guide follows official Jules docs and the AGENTS.md recommendation. Keep your AGENTS.md small and explicit ‚Äî agents read it first."
      },
      "promptsGuide": {
        "title": "Jules Prompt Library Guide",
        "introduction": "This repository contains a curated library of pre-made, machine-readable task prompts that empower an AI software engineer like Jules to turn user intent into production-grade work. This guide explains the purpose of each prompt and provides a recommended workflow for using them together.",
        "promptLibrary": [
          {
            "name": "template_master_prompt.md",
            "purpose": "The master template used to create and standardize all other prompts. It is not intended for direct use but serves as a 'golden copy' for prompt engineering."
          },
          {
            "name": "task_generate_prompt_from_description.md",
            "purpose": "To generate a new, high-quality prompt from a user's description.",
            "whenToUse": [
              "When you have an idea for a new prompt but want the AI to help you write it.",
              "To quickly create new prompts that are consistent with the existing ones in the library."
            ]
          },
          {
            "name": "task_audit_repo.md",
            "purpose": "To conduct a comprehensive, evidence-based audit of a repository or live website.",
            "whenToUse": [
              "When you are new to a project and need to understand how it works.",
              "Before starting a major refactoring or migration project.",
              "As a periodic health check for a project."
            ]
          },
          {
            "name": "task_analyze_and_improve_ui_ux.md",
            "purpose": "To analyze and improve the frontend UI/UX of a repository.",
            "whenToUse": [
              "When you want to improve the user experience of your website.",
              "Before starting a major redesign of your website.",
              "When you want to get a fresh perspective on your website's UI/UX."
            ]
          },
          {
            "name": "task_harden_repo_initial.md",
            "purpose": "To perform a one-time, comprehensive hardening and baselining pass on a new or unmaintained repository.",
            "whenToUse": [
              "On a brand new repository to set it up with best practices from the start.",
              "On an existing repository that lacks modern CI/CD and testing infrastructure."
            ]
          },
          {
            "name": "task_harden_repo_iterative.md",
            "purpose": "To perform ongoing, iterative improvements to a repository that has already been hardened.",
            "whenToUse": [
              "For regular maintenance and improvement of a mature project.",
              "To fix flaky tests and improve the reliability of the CI/CD pipeline."
            ]
          },
          {
            "name": "task_fix_and_refine.md",
            "purpose": "To transform a prototype or demo-quality project into a production-grade application.",
            "whenToUse": [
              "When you have a working prototype that needs to be made more robust.",
              "To address technical debt and improve the overall quality of a codebase."
            ]
          },
          {
            "name": "task_build_from_plan.md",
            "purpose": "To analyze a repository's blueprint/plan and current state, and iteratively implement the next logical steps to build a robust, production-grade system.",
            "whenToUse": [
              "When a project has a clear planning document but needs implementation.",
              "To continue work on a partially completed project that has a defined roadmap."
            ]
          },
          {
            "name": "task_update_dependencies.md",
            "purpose": "To update a project's dependencies to their latest compatible versions.",
            "whenToUse": [
              "To keep a project's dependencies up-to-date and secure.",
              "As a regular maintenance task to avoid falling too far behind on dependency versions."
            ]
          },
          {
            "name": "task_curate_repo.md",
            "purpose": "To analyze an unknown repository, make safe, reversible improvements, and provide a clear report.",
            "whenToUse": [
              "When you encounter a repository with no documentation and need to understand its contents.",
              "For bulk curation or triage of a large number of repositories."
            ]
          }
        ],
        "recommendedWorkflow": [
          {
            "step": 1,
            "action": "Audit the repository.",
            "prompt": "task_audit_repo.md",
            "goal": "To get a deep understanding of the project's current state.",
            "outcome": "A comprehensive audit report that will inform the next steps."
          },
          {
            "step": 2,
            "action": "Harden the repository.",
            "prompt": "task_harden_repo_initial.md",
            "goal": "To set up a modern CI/CD pipeline and testing infrastructure.",
            "outcome": "A repository with automated checks for quality, performance, and accessibility."
          },
          {
            "step": 3,
            "action": "Fix and refine the codebase.",
            "prompt": "task_fix_and_refine.md",
            "goal": "To address any bugs or architectural issues found in the audit.",
            "outcome": "A robust, reliable, and well-documented codebase."
          },
          {
            "step": 4,
            "action": "Perform ongoing maintenance.",
            "prompts": [
              "task_harden_repo_iterative.md",
              "task_update_dependencies.md"
            ],
            "goal": "To keep the project in a good state over time.",
            "outcome": "A project that is continuously improved and kept up-to-date."
          }
        ]
      }
    },
    "references": [
      {
        "id": 1,
        "text": "Jules: Google's autonomous AI coding agent - Google Blog",
        "url": "https://blog.google/technology/google-labs/jules/"
      },
      {
        "id": 2,
        "text": "Jules - An Asynchronous Coding Agent",
        "url": "https://jules.google/"
      },
      {
        "id": 3,
        "text": "How to Actually Use Jules: A Developer's Guide to Google's AI Coding Agent - Medium",
        "url": "https://medium.com/@creativeaininja/how-to-actually-use-jules-a-developers-guide-to-google-s-ai-coding-agent-dd34aea0fbee"
      },
      {
        "id": 4,
        "text": "Jules AI Review 2025: Google's Autonomous Coding Agent Tested - Skywork.ai",
        "url": "https://skywork.ai/blog/jules-ai-review-2025-google-autonomous-coding-agent/"
      },
      {
        "id": 5,
        "text": "Jules: Google's AI Coder Hype vs. Hard Truths - Latenode",
        "url": "https://latenode.com/blog/jules-google-ai-coder-truth"
      },
      {
        "id": 6,
        "text": "Is Jules utterly broken for anyone else? : r/JulesAgent - Reddit",
        "url": "https://www.reddit.com/r/JulesAgent/comments/1kxw9ak/is_jules_utterly_broken_for_anyone_else/"
      },
      {
        "id": 7,
        "text": "Jules AI SWE Agent Review: Google's Take on Coding Automation | Engine - EngineLabs.ai",
        "url": "https://www.enginelabs.ai/blog/jules-ai-swe-agent-googles-take-on-coding-automation"
      },
      {
        "id": 8,
        "text": "Google Jules: The Complete Guide to Google's AI Coding Agent | Entelligence Blog",
        "url": "https://www.entelligence.ai/blogs/google-jules-free-async-ai-for-debugging-code"
      },
      {
        "id": 9,
        "text": "Getting started | Jules",
        "url": "https://jules.google/docs"
      },
      {
        "id": 10,
        "text": "Jules: Inside Google's Asynchronous Coding Agent - GoCodeo",
        "url": "https://www.gocodeo.com/post/jules-inside-googles-asynchronous-coding-agent"
      },
      {
        "id": 11,
        "text": "Changelog - Jules",
        "url": "https://jules.google/docs/changelog/"
      },
      {
        "id": 12,
        "text": "What are AI agents? Definition, examples, and types | Google Cloud",
        "url": "https://cloud.google.com/discover/what-are-ai-agents"
      },
      {
        "id": 13,
        "text": "Meet Jules' sharpest critic and most valuable ally - Google Developers Blog",
        "url": "https://developers.googleblog.com/en/meet-jules-sharpest-critic-and-most-valuable-ally/"
      },
      {
        "id": 14,
        "text": "Google's Jules AI coding agent built a new feature I could actually ship while I made coffee! - ZDNet",
        "url": "https://www.zdnet.com/article/googles-jules-ai-coding-agent-built-a-new-feature-i-could-actually-ship-while-i-made-coffee/"
      },
      {
        "id": 15,
        "text": "Vertex AI Agent Builder | Google Cloud",
        "url": "https://cloud.google.com/products/agent-builder"
      },
      {
        "id": 16,
        "text": "Agent Development Kit - Google GitHub",
        "url": "https://google.github.io/adk-docs/"
      },
      {
        "id": 17,
        "text": "Announcing the Agent2Agent Protocol (A2A) - Google for Developers Blog",
        "url": "https://developers.googleblog.com/en/a2a-a-new-era-of-agent-interoperability/"
      }
    ]
  }
}